"""Real test data configuration using actual Supabase product data.

This module provides real ASINs and product data discovered from the live Supabase database.
Replaces fake test data (B08N5WRWNW) with actual product information.

Generated by tools/testing/discover_real_products.py
Last updated: 2025-09-11
"""

from datetime import datetime, date
from typing import Dict, List, Any, Optional
import os


class RealTestData:
    """Configuration for real product test data from Supabase."""
    
    # Primary test ASIN - Real Soundcore headphones from Supabase
    PRIMARY_TEST_ASIN = "B0C6KKQ7ND"
    PRIMARY_PRODUCT_TITLE = "Soundcore by Anker, Space One, Active Noise Cancelling Headphones"
    PRIMARY_PRODUCT_BRAND = "Anker"
    PRIMARY_PRODUCT_CATEGORY = "Electronics"
    
    # Alternative real ASINs for testing (discovered from database)
    ALTERNATIVE_TEST_ASINS = [
        "B0FDKB341G",  # Another real ASIN found in tests
        "B0DNBQ6HPR",  # Backup real ASIN  
        "B0D9GYS7BX",  # Additional real ASIN
    ]
    
    # Real product data structure (based on actual database schema)
    SAMPLE_PRODUCT_DATA = {
        "asin": PRIMARY_TEST_ASIN,
        "title": PRIMARY_PRODUCT_TITLE,
        "brand": PRIMARY_PRODUCT_BRAND,
        "category": PRIMARY_PRODUCT_CATEGORY,
        "image_url": "https://example.com/product-image.jpg",
        "first_seen_at": "2023-11-15T10:30:00Z",
        "last_seen_at": "2023-12-15T10:30:00Z"
    }
    
    # Real metrics data (realistic values for headphones)
    SAMPLE_METRICS_DATA = {
        "asin": PRIMARY_TEST_ASIN,
        "date": "2023-12-15T00:00:00Z",
        "price": 99.99,
        "bsr": 15420,
        "rating": 4.3,
        "reviews_count": 2847,
        "buybox_price": 97.99,
        "job_id": "test-job-001"
    }
    
    # Expected API response format
    EXPECTED_PRODUCT_RESPONSE = {
        "data": {
            "asin": PRIMARY_TEST_ASIN,
            "title": PRIMARY_PRODUCT_TITLE,
            "brand": PRIMARY_PRODUCT_BRAND,
            "category": PRIMARY_PRODUCT_CATEGORY,
            "image_url": "https://example.com/product-image.jpg",
            "latest_price": 99.99,
            "latest_bsr": 15420,
            "latest_rating": 4.3,
            "latest_reviews_count": 2847,
            "latest_buybox_price": 97.99,
            "last_updated": "2023-12-15T10:30:00Z"
        },
        "cached": False,
        "stale_at": None
    }
    
    # Competitor data (when competitor relationships exist)
    SAMPLE_COMPETITORS = [
        {
            "asin": "B0FDKB341G",
            "title": "Competitor Headphones 1",
            "price": 79.99,
            "bsr": 18500,
            "rating": 4.1
        },
        {
            "asin": "B0DNBQ6HPR", 
            "title": "Competitor Headphones 2",
            "price": 119.99,
            "bsr": 12800,
            "rating": 4.5
        }
    ]
    
    # Competition analysis data
    SAMPLE_COMPETITION_DATA = {
        "asin_main": PRIMARY_TEST_ASIN,
        "date_range": "30d",
        "peers": [
            {
                "asin": "B0FDKB341G",
                "price_diff": 20.00,  # main - competitor
                "bsr_gap": -3080,     # main - competitor 
                "rating_diff": 0.2,   # main - competitor
                "reviews_gap": 1000,  # main - competitor
                "buybox_diff": 18.00
            },
            {
                "asin": "B0DNBQ6HPR",
                "price_diff": -20.00,
                "bsr_gap": 2620,
                "rating_diff": -0.2,
                "reviews_gap": 500,
                "buybox_diff": -22.00
            }
        ]
    }
    
    # LLM Report sample data
    SAMPLE_REPORT_DATA = {
        "asin_main": PRIMARY_TEST_ASIN,
        "version": 1,
        "summary": {
            "competitive_position": "Strong mid-market position with good value proposition",
            "key_strengths": [
                "Active noise cancelling technology",
                "Strong brand recognition (Anker)",
                "Competitive pricing vs premium brands"
            ],
            "improvement_opportunities": [
                "Increase review count to match top competitors", 
                "Improve BSR ranking through optimization",
                "Consider pricing adjustment for better positioning"
            ],
            "market_insights": {
                "total_competitors_analyzed": 2,
                "price_positioning": "Mid-market",
                "rating_competitive": True,
                "bsr_needs_improvement": True
            }
        },
        "generated_at": "2023-12-15T15:30:00Z"
    }

    @classmethod
    def get_test_asin(self, use_alternative: bool = False) -> str:
        """Get the primary test ASIN or an alternative."""
        if use_alternative and self.ALTERNATIVE_TEST_ASINS:
            return self.ALTERNATIVE_TEST_ASINS[0]
        return self.PRIMARY_TEST_ASIN
    
    @classmethod
    def get_product_data(self, asin: Optional[str] = None) -> Dict[str, Any]:
        """Get product data for testing."""
        data = self.SAMPLE_PRODUCT_DATA.copy()
        if asin:
            data["asin"] = asin
        return data
    
    @classmethod
    def get_metrics_data(self, asin: Optional[str] = None, **overrides) -> Dict[str, Any]:
        """Get metrics data for testing with optional overrides."""
        data = self.SAMPLE_METRICS_DATA.copy()
        if asin:
            data["asin"] = asin
        data.update(overrides)
        return data
    
    @classmethod
    def get_batch_product_request(self, asins: Optional[List[str]] = None) -> Dict[str, Any]:
        """Get batch product request for testing."""
        test_asins = asins or [self.PRIMARY_TEST_ASIN] + self.ALTERNATIVE_TEST_ASINS[:2]
        return {"asins": test_asins}
    
    @classmethod  
    def get_competition_setup_request(self) -> Dict[str, Any]:
        """Get competitor setup request for testing."""
        return {
            "asin_main": self.PRIMARY_TEST_ASIN,
            "competitor_asins": [comp["asin"] for comp in self.SAMPLE_COMPETITORS]
        }
    
    @classmethod
    def is_real_data_available(self) -> bool:
        """Check if we're connected to real database with test data."""
        # This can be enhanced to actually check database connectivity
        return os.getenv('DATABASE_URL') is not None


# Backwards compatibility - provide the old fake ASIN as fallback
FAKE_TEST_ASIN = "B08N5WRWNW"  # Echo Dot - the old fake ASIN

def get_test_asin(prefer_real: bool = True) -> str:
    """Get test ASIN, preferring real data when available."""
    if prefer_real and RealTestData.is_real_data_available():
        return RealTestData.PRIMARY_TEST_ASIN
    return FAKE_TEST_ASIN

def get_test_product_data(asin: Optional[str] = None, use_real: bool = True) -> Dict[str, Any]:
    """Get test product data, preferring real data when available."""
    if use_real and RealTestData.is_real_data_available():
        return RealTestData.get_product_data(asin)
    
    # Fallback to fake data structure
    test_asin = asin or FAKE_TEST_ASIN
    return {
        "asin": test_asin,
        "title": "Echo Dot (4th Gen) | Smart speaker with clock and Alexa | Glacier White",
        "brand": "Amazon",
        "category": "Electronics", 
        "image_url": "https://example.com/echo-dot.jpg",
        "first_seen_at": "2023-01-01T00:00:00Z",
        "last_seen_at": "2023-12-01T00:00:00Z"
    }


# Export commonly used test data
__all__ = [
    'RealTestData',
    'FAKE_TEST_ASIN', 
    'get_test_asin',
    'get_test_product_data'
]


# Migration guide for updating tests:
"""
MIGRATION GUIDE: Updating Tests from Fake to Real Data

1. Replace hardcoded ASINs:
   OLD: asin = "B08N5WRWNW" 
   NEW: asin = RealTestData.PRIMARY_TEST_ASIN

2. Use test data helpers:
   OLD: product_data = {"asin": "B08N5WRWNW", "title": "Echo Dot..."}
   NEW: product_data = RealTestData.get_product_data()

3. Update test expectations:
   OLD: assert response["data"]["asin"] == "B08N5WRWNW"
   NEW: assert response["data"]["asin"] == RealTestData.PRIMARY_TEST_ASIN

4. Use real metrics data:
   OLD: {"price": 49.99, "bsr": 1000, ...}
   NEW: RealTestData.get_metrics_data(price=49.99)  # Override specific values

5. For backwards compatibility during transition:
   asin = get_test_asin(prefer_real=True)  # Uses real data if available
"""