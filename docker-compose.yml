version: '3.8'

services:
  # Nginx Reverse Proxy & API Gateway
  nginx:
    image: nginx:1.25-alpine
    container_name: amazon_tool_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./swagger-ui:/usr/share/nginx/html/docs:ro
      - nginx_cache:/var/cache/nginx
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - API_HOST=api
      - API_PORT=8000
      - GRAFANA_HOST=grafana
      - GRAFANA_PORT=3000
    depends_on:
      - api
    networks:
      - frontend
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: amazon_tool_api
    ports:
      - "8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - APIFY_API_KEY=${APIFY_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - api_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Workers (Horizontally Scalable)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: amazon_tool_worker
    command: celery -A src.main.tasks worker --loglevel=INFO --concurrency=4 --prefetch-multiplier=1
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - APIFY_API_KEY=${APIFY_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - C_FORCE_ROOT=1
    volumes:
      - worker_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "src.main.tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: amazon_tool_scheduler
    command: celery -A src.main.tasks beat --loglevel=INFO --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - APIFY_API_KEY=${APIFY_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - C_FORCE_ROOT=1
    volumes:
      - scheduler_logs:/app/logs
      - scheduler_data:/tmp
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: amazon_tool_redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # PostgreSQL Database (Optional - can use external Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: amazon_tool_postgres
    ports:
      - "5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-amazon_tool}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: amazon_tool_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    depends_on:
      - api
      - worker
      - scheduler
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: amazon_tool_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Networks
networks:
  frontend:
    driver: bridge
    name: amazon_tool_frontend
  backend:
    driver: bridge
    name: amazon_tool_backend
    internal: false
  monitoring:
    driver: bridge
    name: amazon_tool_monitoring

# Volumes
volumes:
  # Application data
  postgres_data:
    name: amazon_tool_postgres_data
  redis_data:
    name: amazon_tool_redis_data
  
  # Logs
  api_logs:
    name: amazon_tool_api_logs
  worker_logs:
    name: amazon_tool_worker_logs
  scheduler_logs:
    name: amazon_tool_scheduler_logs
  
  # Monitoring
  prometheus_data:
    name: amazon_tool_prometheus_data
  grafana_data:
    name: amazon_tool_grafana_data
  
  # Nginx
  nginx_cache:
    name: amazon_tool_nginx_cache
  
  # Scheduler
  scheduler_data:
    name: amazon_tool_scheduler_data